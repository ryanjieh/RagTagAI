# app.yaml for Python App Engine Standard Environment

# Specify the runtime environment for your application.
# For Python 3, use "python3". App Engine automatically selects the latest minor version.
runtime: python3

# Entrypoint specifies the command to start your application.
# This example assumes your application has a main.py file and uses gunicorn to serve it.
# You might need to adjust this based on your WSGI server (e.g., Flask's default development server, uWSGI)
# and the name of your main application file/object.
entrypoint: gunicorn -b :$PORT main:app

# env_variables: Define environment variables that your application can access.
# These variables are useful for configuring your application without modifying code,
# especially for things like database connections, API keys, etc.
env_variables:
  APP_SECRET_KEY: "your-super-secret-key"
  DATABASE_URL: "mysql://user:password@host/database"

# handlers: Define how URL paths are routed to your application code.
# The order of handlers matters; the first matching handler is used.
handlers:
  # This handler serves static files directly from your application's 'static' directory.
  # It's efficient for serving CSS, JavaScript, images, etc., as they bypass your application code.
  - url: /static
    static_dir: static

  # This handler routes all other requests to your Python application.
  # The 'script: auto' directive tells App Engine to automatically detect your
  # application's WSGI entrypoint (e.g., 'main.py' and an 'app' object within it).
  - url: /.*
    script: auto

# Optional: Automatic scaling settings.
# This section configures how App Engine scales your application instances.
# You can choose between basic, automatic, or manual scaling.
# For most web applications, automatic scaling is recommended.
automatic_scaling:
  min_instances: 1 # Minimum number of instances to keep running (reduces cold starts).
  max_instances: 10 # Maximum number of instances that can be spun up.
  min_idle_instances: 1 # Minimum number of idle instances (for faster response to traffic spikes).
  max_idle_instances: 3 # Maximum number of idle instances.
  target_cpu_utilization: 0.6 # Target CPU utilization before App Engine scales up.
  target_throughput_utilization: 0.8 # Target requests per second utilization.
  max_concurrent_requests: 80 # Maximum number of concurrent requests an instance can handle.

# Optional: Manual scaling settings. Use 'manual_scaling' instead of 'automatic_scaling'.
# manual_scaling:
#   instances: 1 # Specifies a fixed number of instances.

# Optional: Basic scaling settings. Use 'basic_scaling' instead.
# basic_scaling:
#   max_instances: 5 # Maximum number of instances.
#   idle_timeout: 10m # How long an instance should stay alive with no traffic.

# Optional: Networks settings. For advanced networking configurations, like VPC access.
# network:
#   name: your-vpc-network
#   subnet_name: your-subnet

# Optional: Set resource limits for your instances.
# resources:
#   cpu: 1
#   memory_gb: 0.5
#   disk_size_gb: 10

# Optional: VPC Access Connector
# vpc_access_connector:
#   name: projects/PROJECT_ID/locations/REGION/connectors/CONNECTOR_NAME

# Optional: Health check settings.
# liveness_check:
#   path: "/_ah/live"
#   check_interval_s: 30
#   timeout_s: 5
#   failure_threshold: 4
#   success_threshold: 2
# readiness_check:
#   path: "/_ah/ready"
#   check_interval_s: 30
#   timeout_s: 5
#   failure_threshold: 4
#   success_threshold: 2
#   app_start_timeout_s: 300
